<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

<!-- enable Method level [vs URL level] authorization  This work for APPLICATION Level scanned components
      Does NOT recognize WEB level components - for THAT  need to place enable line in Dispatcher-servlet-->
	<security:global-method-security pre-post-annotations="enabled"/>	
		
<!-- security:http enables security filter mechanism...name space configuration is activated -->
<!-- use-expressions enables URL level authorization -->
	<security:http  use-expressions="true">

	
	  <security:intercept-url pattern="/login" />  	
	  <security:intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')" />
	  <security:intercept-url pattern="/category/add" access="hasRole('ROLE_ADMIN')" />
	  <security:intercept-url pattern="/category/list" access="hasRole('ROLE_ADMIN')" />
	  <security:intercept-url pattern="/vendor" access="hasAnyRole('ROLE_VENDOR','ROLE_ADMIN')" />
	  <security:intercept-url pattern="/vendor/upload" access="hasAnyRole('ROLE_VENDOR','ROLE_ADMIN')" />
<!-- 	  <security:intercept-url pattern="/welcome" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"  /> -->
 	
		<!-- always-use-default-target overrides where login was triggered -->
		<!-- logout-url renames j_security_logout URL -->


		<security:form-login login-page="/login" 
               default-target-url="/vendorsHome"    
               always-use-default-target="false"   
               authentication-failure-url="/loginfailed"/>
        <security:logout logout-success-url="/logout"  logout-url= "/doLogout"/>
        
		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout 
		NOTE: is it JUST a URL naming convention - no mapping is required
				logout-url= "/doLogout" REPLACES it -->
	</security:http>
	

	<security:authentication-manager>
		<security:authentication-provider>
<!-- 			<security:password-encoder hash="bcrypt" /> -->
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from users_credntial where username=?"
				authorities-by-username-query="select u1.username, u2.authority from users_credntial u1, authorities u2 where u1.username = u2.username and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>


<!-- 	<security:authentication-manager> -->
<!-- 		<security:authentication-provider> -->
<!-- 			<security:user-service> -->
<!-- 				<security:user name="admin" password="admin" authorities="ROLE_ADMIN" /> -->
<!-- 				<security:user name="guest" password="guest" authorities="ROLE_USER" /> -->
<!-- 			</security:user-service> -->
<!-- 		</security:authentication-provider> -->
<!-- 	</security:authentication-manager> -->
</beans>

